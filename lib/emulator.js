// Generated by CoffeeScript 1.3.1
(function() {
  var Emulator, Machine, Screen, cpu, e, fs, _ref,
    __slice = [].slice;

  fs = require('fs');

  cpu = (_ref = require('./machine'), Machine = _ref.Machine, _ref);

  Emulator = (function() {

    Emulator.name = 'Emulator';

    function Emulator() {}

    Emulator.prototype.loadSource = function(source) {
      return this.loadProgram(cpu.assemble(source));
    };

    Emulator.prototype.loadProgram = function(program) {
      return this.machine = new Machine(program);
    };

    Emulator.prototype.run = function(progressive) {
      var screen;
      this.progressive = progressive;
      screen = new Screen(this.machine);
      while (this.machine.exited === false) {
        this.machine.step();
        if (this.machine.videoDirty) {
          screen.display();
          this.machine.videoDirty = false;
          if (!this.progressive) {
            process.stdout.write((new Array(19)).join('\x1b[1A'));
          } else {
            cpu.print(this.machine.memory);
          }
        }
      }
      if (!this.progressive) {
        return screen.display();
      }
    };

    Emulator.prototype.dump = function() {
      cpu.print(this.machine.memory);
      return cpu.dump(this.machine);
    };

    return Emulator;

  })();

  Screen = (function() {

    Screen.name = 'Screen';

    Screen.prototype.BORDER = '\x1b[46;34m#\x1b[49;39m';

    function Screen(machine) {
      this.machine = machine;
      this.ram = this.machine.memory;
    }

    Screen.prototype.write = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return process.stdout.write(args.join(''));
    };

    Screen.prototype.colors = {
      0x0: 0,
      0x1: 4,
      0x2: 2,
      0x3: 6,
      0x4: 1,
      0x5: 5,
      0x6: 3,
      0x7: 7
    };

    Screen.prototype.display = function() {
      var bg, blink, char, col, fg, row, word, _i, _j;
      this.write((new Array(35)).join(this.BORDER), '\x1b[39;49m\n');
      for (row = _i = 0; _i < 16; row = ++_i) {
        this.write(this.BORDER);
        for (col = _j = 0; _j < 32; col = ++_j) {
          word = (this.ram[0x8000 + (row * 32) + col] || 0) & 0xffff;
          char = String.fromCharCode(word & 0x7f);
          if ((word & 0x7f) < 0x20) {
            char = ' ';
          }
          blink = word & 0x80 ? ";5" : '';
          bg = (word >> 8) & 0xf;
          bg = this.colors[bg & 0x7] + 40;
          fg = (word >> 12) & 0xf;
          fg = this.colors[fg & 0x7] + 30;
          this.write("\x1b[" + fg + ";" + bg + blink + "m" + char + "\x1b[39;49;0m");
        }
        this.write(this.BORDER, '\n');
      }
      return this.write((new Array(35)).join(this.BORDER), '\x1b[39;49m\n');
    };

    return Screen;

  })();

  if (require.main === module) {
    e = new Emulator;
    e.loadSource(fs.readFileSync("" + __dirname + "/../code/matrix.dasm").toString());
    e.run(!true);
    e.dump();
  }

}).call(this);
