// Generated by CoffeeScript 1.3.1
(function() {
  var code, command, cpu, fs, hex, infile, loadHex, machine, outfile, prog, rl, source, word;

  fs = require('fs');

  cpu = require('./machine');

  command = process.argv[2];

  loadHex = function(code) {
    var index, program, word, _i, _len, _step;
    program = [];
    for (index = _i = 0, _len = code.length, _step = 4; _i < _len; index = _i += _step) {
      word = code[index];
      program.push(parseInt(code.substr(index, 4), 16));
    }
    return program;
  };

  if (command === 'compile' || command === 'c') {
    infile = process.argv[3];
    outfile = infile.replace(/\.asm$/i, '') + ".hex";
    source = fs.readFileSync(infile).toString();
    prog = cpu.assemble(source);
    hex = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = prog.length; _i < _len; _i++) {
        word = prog[_i];
        _results.push(cpu.hex(word));
      }
      return _results;
    })()).join('');
    fs.writeFileSync(outfile, hex);
    console.log("Compiled " + infile + " to " + outfile);
  }

  if (command === 'decompile' || command === 'd') {
    infile = process.argv[3];
    outfile = infile + ".d.asm";
    source = fs.readFileSync(infile).toString();
    if (!source.match(/^[a-f0-9]+$/i)) {
      console.log("" + infile + " doesn't seem to be a valid hex file");
    } else {
      prog = loadHex(source);
      machine = new cpu.Machine(prog);
      code = machine.decompile();
      console.log(code);
    }
  }

  if (command === 'run' || command === 'r') {
    infile = process.argv[3];
    source = fs.readFileSync(infile).toString();
    prog = cpu.assemble(source);
    machine = new cpu.Machine(prog, true);
    rl = require('readline').createInterface(process.stdin, process.stdout);
    rl.on('line', function() {
      machine.step();
      cpu.print(machine.memory);
      cpu.dump(machine);
      return console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
    });
  }

  if (command === 'dump') {
    infile = process.argv[3];
    source = fs.readFileSync(infile).toString();
    prog = cpu.assemble(source);
    cpu.print(prog);
  }

}).call(this);
